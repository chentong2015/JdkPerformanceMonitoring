TODO. 实战场景，需要将大量的数据写入到csv格式文件中
 1. 写入的数据需要进行换行符的缩合，保证字符串在同一行
 2. 对于大数据场景需要考虑IO造成的性能和时间影响

自测环境:
Benchmark                                     Mode  Cnt        Score   Error  Units
BenchsTest.benchEscape_0     thrpt    2   772660.290          ops/s  使用StringUtilsEscaped.escape取消换行符的效果
BenchsTest.benchEscape_1     thrpt    2  1345334.623          ops/s  使用OutputWriter.writeEscaped的测试效果
BenchsTest.benchEscape_2     thrpt    2  2295277.267          ops/s  使用StringBuilderEscaped.appendEscaped的测试效果
BenchsTest.benchEscape_3     thrpt    2   894739.311          ops/s  测试StringBuilderEscaped并发执行效果
BenchsTest.benchEscape_base  thrpt    2  4919446.242          ops/s  原始StringBuilder的测试效果

项目生产环境:
REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

SBEscaped在并发条件下效果最优(项目环境):
实战环境采用的是Writer流来写入，并且自定义替换换行符的算法
Benchmark                 Mode  Cnt        Score   Error  Units
Benchs.benchEscape_0     thrpt    2  4370167.037          ops/s
Benchs.benchEscape_1     thrpt    2  1106565.892          ops/s
Benchs.benchEscape_2     thrpt    2  3879286.531          ops/s
Benchs.benchEscape_3     thrpt    2  1102772.969          ops/s
Benchs.benchEscape_base  thrpt    2  4487733.830          ops/s